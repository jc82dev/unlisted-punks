(()=>{const CONFIG={API_ENDPOINT:"https://us-central1-unlisted-punks.cloudfunctions.net/api"},DEFAULT_CHAIN="ethereum",PLACEHOLDER="Select...",MESSAGES={METAMASK_NOT_FOUND:'You need an Ethereum wallet to mint NFTs! You can download metamask <a target="_blank" href="https://metamask.io/download/">here</a>',MINTING_IN_PROGRESS:'<img src="/assets/img/loader.gif"><span>It can take a few seconds...</span>',MINT_SUCCESS:{ethereum:'Punks minted successfully! Click <a target="_blank" href="//etherscan.io/tx/{tx}">here</a> to check the transaction on etherscan',bsc:'Punks minted successfully! Click <a target="_blank" href="//bscscan.com/tx/{tx}">here</a> to check the transaction on bscscan',polygon:'Punks minted successfully! Click <a target="_blank" href="//polygonscan.com/tx/{tx}">here</a> to check the transaction on polygonscan'}};let SETTINGS=null;const INITIAl_STATE={gender:"male",skin:"human-light",blemish:null,ear:null,eyes:null,"facial-hair":null,head:null,mouth:null,"mouth-accessory":null,neck:null,nose:null},STATE={...INITIAl_STATE};let IS_LOADING=!1,IS_MINTING=!1,WEB3=null,ACCOUNT=null;const modal=document.querySelector("#modal"),modalContent=modal.querySelector("#modal .modal-content"),modalMessage=document.querySelector("#modalMessage"),modalMessageContent=document.querySelector("#modalMessage .modal-content"),combos=Array.from(document.querySelectorAll(".combo")),closeButton=document.querySelector("#btnCloseModal"),closePunkViewerButton=document.querySelector("#btnClosePunkViewer"),addToCartButton=document.querySelector("#btnAddToCart"),connectWalletButton=document.querySelector("#btnConnectWallet"),mintFirstPunkButton=document.querySelector("#btnMintFirstButton"),result=document.querySelector(".result"),cartItems=document.querySelector("#cartItems"),mintButton=document.querySelector("#btnMint"),closeMessageButton=document.querySelector("#closeMessageButton"),currentTotalSpan=document.querySelector("#cartTotal"),wallet=document.querySelector(".wallet"),walletList=document.querySelector(".wallet-list"),builder=document.querySelector(".builder"),punkViewer=document.querySelector("#punkViewer"),punkViewerItem=document.querySelector("#punkViewer .punk-viewer-item"),punkViewerTitle=document.querySelector("#punkViewerTitle"),traitsList=document.querySelector("#traitsList"),favicon=document.getElementById("favicon"),currentPrice=document.getElementById("currentPrice"),gridItems=Array.from(document.querySelectorAll(".punk-grid-item")),supplyEthereum=document.getElementById("supplyEthereum"),supplyBsc=document.getElementById("supplyBsc"),supplyPolygon=document.getElementById("supplyPolygon"),cartSymbol=document.getElementById("cartSymbol"),getCartItems=()=>Array.from(cartItems.querySelectorAll(".item")).map(i=>JSON.parse(decodeURIComponent(i.dataset.mintrequest))),getPunk=async id=>{window.progress.start(),IS_LOADING=!0,resetCart();let error=null;const selectedChain=getCurrentChain();try{const response=await fetch(`${CONFIG.API_ENDPOINT}?method=getPunk&tokenId=${id}&chain=${selectedChain}`);if(response.ok){const body=await response.json();return SETTINGS=body.settings,resetCurrentData(),body}error=await response.text()}catch(e){error=e.message}finally{IS_LOADING=!1,window.progress.stop(),resetCart(error)}},getObjectPosition=(layer,id,size,gender)=>(size=size||"var(--punk--comboSize)",gender=gender||STATE.gender,layer&&id?"gender"!==layer?SPRITES[gender][layer]?`calc(-${SPRITES[gender][layer][id]} * ${size})`:null:`calc(-${SPRITES[id].skin[STATE.skin]} * ${size})`:null),setModalOpen=(value,modalItem=modal)=>{value?(document.body.style.overflow="hidden",modalItem.classList.add("visible")):(document.body.style.overflow="initial",modalItem.classList.remove("visible"))},showMessage=(msg,type="success")=>{msg?(document.body.style.overflow="hidden",modalMessage.dataset.type=type,modalMessage.classList.add("visible"),modalMessageContent.innerHTML=msg):(document.body.style.overflow="initial",modalMessage.classList.remove("visible"),modalMessageContent.innerHTML="")},createCombo=elem=>{const layer=elem.dataset.combo,selectedId=STATE[layer];elem.dataset.empty=!selectedId;const basePos=getObjectPosition("skin",STATE.skin);elem.innerHTML=`\n    <div class="layer-container" style="background-image:${["skin","gender"].includes(layer)?"":"url('assets/img/sprites.png')"};background-position:${basePos}">\n        <img class="layer" src="assets/img/sprites.png" style="object-position:${getObjectPosition(layer,selectedId)}" />\n    </div>\n    <div class="label-container">\n        <div class="label-head">${window.labelize(elem.dataset.combo)}</div>\n        <div class="label">${selectedId?window.labelize(selectedId):PLACEHOLDER}</div>\n    </div>`,elem.addEventListener("click",()=>{document.body.style.overflow="hidden";const basePos=getObjectPosition("skin",STATE.skin);let options=null;options="gender"===layer?{male:window.SPRITES.male.skin[STATE.skin],female:window.SPRITES.female.skin[STATE.skin]}:window.SPRITES[STATE.gender][layer];let html='<div class="options">';Object.keys(options).map(id=>({id:id,pos:options[id]})).forEach(option=>{let isSelected=!1;"none"!==option.id||"none"!==STATE[layer]&&STATE[layer]?"none"!==option.id&&SPRITES[STATE.gender][layer]&&SPRITES[STATE.gender][layer][option.id]&&(isSelected=STATE[layer]===option.id):isSelected=!0,html+=`<div data-id="${option.id}" data-empty="${"none"===option.id}" data-selected="${isSelected}" class="option" onclick="selectSprite('${layer}','${option.id}')">\n                <div class="layer-container" style="background-image:${["skin","gender"].includes(layer)?"":"url('assets/img/sprites.png')"};background-position:${basePos}">\n                    <img class="layer" src="assets/img/sprites.png" style="object-position:${getObjectPosition(layer,option.id)}" />\n                </div>\n                <div class="label">${window.labelize(option.id)}</div>\n            </div>`}),html+="</div>",modalContent.innerHTML=html,setModalOpen(!0)})},resetCombos=()=>{const bgPos=getObjectPosition("skin",STATE.skin);combos.forEach(c=>{const layer=c.dataset.combo,g=STATE.gender,value=STATE[layer],isHidden="gender"!==layer&&!window.SPRITES[g][layer];c.dataset.hidden=isHidden;const isEmpty=!value||"none"===value;c.dataset.empty=isEmpty;const layerNode=c.querySelector(".layer"),label=c.querySelector(".label");layerNode.style=`object-position:${getObjectPosition(layer,value)}`,layerNode.dataset.empty=isEmpty,label.innerHTML=isEmpty?PLACEHOLDER:window.labelize(value);const layerCointainerNode=c.querySelector(".layer-container");if(layerCointainerNode.style.backgroundPosition=bgPos,"gender"===layer)newPos=bgPos;else if(STATE[layer]&&SPRITES[g][layer]&&void 0!==SPRITES[g][layer][STATE[layer]])newPos=getObjectPosition(layer,STATE[layer]);else{c.dataset.empty="true",newPos=getObjectPosition(layer,null);const labelNode=c.querySelector(".label");labelNode.innerHTML=PLACEHOLDER}c.querySelector(".layer").style.objectPosition=newPos})},resetResult=({node:node,state:state,imgSelector:imgSelector,size:size}={})=>{node=node||result,state=state||STATE,imgSelector=imgSelector||".result > img",size=size||"var(--punk--result)",state===STATE&&(node.dataset.tokenid=window.getTokenId(STATE,!0));const images=Array.from(document.querySelectorAll(imgSelector));images.forEach(img=>{if(state[img.dataset.layer]&&"none"!==state[img.dataset.layer]&&window.SPRITES[state.gender][img.dataset.layer]&&void 0!==window.SPRITES[state.gender][img.dataset.layer][state[img.dataset.layer]]){img.dataset.empty="false";const pos=getObjectPosition(img.dataset.layer,state[img.dataset.layer],size,state.gender);pos?img.style.objectPosition=pos:img.dataset.empty="true"}else img.dataset.empty="true"})},resetCart=error=>{error&&showMessage(error,"error");const currentTokenId=parseInt(result.dataset.tokenid),items=getCartItems();IS_LOADING||IS_MINTING?(addToCartButton.setAttribute("disabled",""),IS_LOADING&&(addToCartButton.innerHTML="Loading...")):(addToCartButton.innerHTML="Add to cart",items.find(i=>i.id===currentTokenId)?addToCartButton.setAttribute("disabled",""):addToCartButton.removeAttribute("disabled")),items.length?IS_MINTING?(mintButton.classList.remove("hidden"),mintButton.setAttribute("disabled",""),mintButton.innerHTML="Minting..."):(mintButton.innerHTML=`Mint ${items.length} punk${items.length>1?"s":""}`,mintButton.classList.remove("hidden"),mintButton.removeAttribute("disabled")):mintButton.classList.add("hidden");let currentTotal=0;items.forEach(i=>currentTotal+=i.price),currentTotalSpan.innerHTML=Math.round(1e3*parseFloat(currentTotal/1e9))/1e3},addToCart=()=>{const currentTokenId=parseInt(result.dataset.tokenid),items=getCartItems();currentTokenId&&!items.includes(i=>currentTokenId===i.id)&&(async()=>{const punk=await getPunk(currentTokenId);if(punk){const img=`https://infura-ipfs.io/ipfs/${punk.imageCid}`;cartItems.insertAdjacentHTML("beforeend",`<div data-tokenid="${punk.tokenId}" data-price="${punk.price}" data-mintrequest="${encodeURIComponent(JSON.stringify(punk.mintRequest))}" class="item" title="#${punk.tokenId}">\n              <a href="#${punk.tokenId}" class="img-container"><img src="${img}" /></a>\n              <button>Remove</button>\n            </div>`),favicon.setAttribute("href",img),favicon.dataset.updated="true",resetCart(),Object.assign(STATE,INITIAl_STATE),resetCombos(),resetResult();const removeButton=cartItems.querySelector(`[data-tokenid="${currentTokenId}"] > button`);removeButton&&removeButton.addEventListener("click",()=>{const item=cartItems.querySelector(`[data-tokenid="${currentTokenId}"]`);item&&item.remove(),resetCart()})}})()},mint=async()=>{let error=null;try{const status=await resetWeb3(!0);if("not-found"===status)showMessage(MESSAGES.METAMASK_NOT_FOUND,"error");else if("connected"===status){const selectedChain=getCurrentChain(),contract=SETTINGS[selectedChain].CONTRACT;if(contract){const mintRequests=getCartItems();if(mintRequests.length){window.progress.start(),IS_MINTING=!0,resetCart();const cartAmount=mintRequests.reduce((prev,i)=>prev+i.price,0);let estimatedGasAmount=await contract.methods.mint(mintRequests).estimateGas({from:ACCOUNT});estimatedGasAmount+=Math.floor(.1*estimatedGasAmount);const mintResponse=await contract.methods.mint(mintRequests).send({from:ACCOUNT,gas:estimatedGasAmount.toString(),value:WEB3.utils.toWei(cartAmount.toString(),"gwei")}).once("transactionHash",()=>{showMessage(MESSAGES.MINTING_IN_PROGRESS,"mint")});showMessage(MESSAGES.MINT_SUCCESS[selectedChain].replace("{tx}",mintResponse.transactionHash)),cartItems.innerHTML="",resetWallet()}}}else await resetWeb3()}catch(e){error=e.message}finally{IS_MINTING=!1,window.progress.stop(),resetCart(error)}},connect=async(chainToConnect=null)=>{const status=await resetWeb3(!0,chainToConnect);"not-found"===status&&showMessage(MESSAGES.METAMASK_NOT_FOUND,"error")},getCurrentMetamaskChain=async provider=>{let result=null;try{const currentChain=await provider.request({method:"eth_chainId"});result=currentChain?Object.keys(SETTINGS).find(i=>SETTINGS[i].chainId===currentChain):null}catch(e){console.error(`error retrieving metamask current chain: ${e.message}`)}return result},getCurrentChain=()=>{const node=document.querySelector('.chain[data-selected="true"]');return node?node.dataset.chain:null},askChain=async(provider,chain=null)=>{const selectedChain=chain||getCurrentChain()||DEFAULT_CHAIN,selectedChainId=SETTINGS[selectedChain]?SETTINGS[selectedChain].chainId:SETTINGS[DEFAULT_CHAIN].chainId,currentChain=await getCurrentMetamaskChain(provider),currentChainId=currentChain?SETTINGS[currentChain].chainId:null;if(currentChain!==currentChainId)try{await provider.request({method:"wallet_switchEthereumChain",params:[{chainId:selectedChainId}]})}catch(e){showMessage(`Please switch your network to "${selectedChain} mainnet" in your ethereum wallet`,"error")}},resetWeb3=async(askConnect,chainToConnect=null)=>{window.progress.start();try{let status="not-found",provider=Web3.givenProvider;if(!SETTINGS){const response=await fetch(`${CONFIG.API_ENDPOINT}?method=getSettings`);if(response.ok)SETTINGS=await response.json(),resetCurrentData();else{const error=await response.text();if(error)throw new Error(error)}}if(provider){const chainName=await getCurrentMetamaskChain(provider);selectChain(chainName,!0),WEB3||(WEB3=new Web3(provider),provider.on("connect",()=>resetWeb3()),provider.on("disconnect",()=>resetWeb3()),provider.on("chainChanged",chainId=>{resetWeb3(),cartItems.innerHTML="",resetCart(),(async()=>{const chainName=await getCurrentMetamaskChain(provider);selectChain(chainName)})()}),provider.on("accountsChanged",()=>resetWeb3()));const accounts=await WEB3.eth.getAccounts();if(ACCOUNT=accounts[0],!ACCOUNT&&askConnect){const accounts=await provider.request({method:"eth_requestAccounts"});ACCOUNT=accounts[0]}if(ACCOUNT){const selectedChain=chainToConnect||getCurrentChain();askConnect&&chainName!==selectedChain?(await askChain(provider,selectedChain),status="invalid-chain"):(status="connected",chainName&&selectChain(chainName),["ethereum","polygon","bsc"].forEach(chain=>{SETTINGS[chain].CONTRACT=new WEB3.eth.Contract(SETTINGS.abi,SETTINGS[chain].address)}))}else status="disconnected"}return document.querySelector("body").dataset.web3=status,await resetWallet(),status}catch(e){console.error(e.stack),showMessage(e.message,"error")}finally{window.progress.stop()}},resetCurrentData=()=>{document.body.dataset.settingsloaded="true";const selectedChain=getCurrentChain()||DEFAULT_CHAIN,currentPriceValue=SETTINGS[selectedChain].price.current;currentPrice.innerHTML=`${Math.round(1e3*currentPriceValue)/1e3} ${SETTINGS[selectedChain].price.symbol}`,supplyEthereum.innerHTML=SETTINGS.ethereum.supply,supplyBsc.innerHTML=SETTINGS.bsc.supply,supplyPolygon.innerHTML=SETTINGS.polygon.supply,cartSymbol.innerHTML=SETTINGS[selectedChain].price.symbol},resetWallet=async()=>{if(ACCOUNT){wallet.dataset.status="loading";let html="";const resultHtml=result.innerHTML;try{const response=await fetch(`${CONFIG.API_ENDPOINT}?method=getWallet&address=${ACCOUNT}`);let punks=[];response.ok&&(punks=await response.json(),html=punks.map((i,index)=>`<div onclick="window.openOpenSea('${i.tokenId}', '${i.chain}')" title="#${i.tokenId} (${i.chain})" class="wallet-item-container">\n                  <div class="wallet-item-chain"><img src="/assets/img/chains/${i.chain}.png" /></div>  \n                  <div data-tokenid="${i.tokenId}" data-walletitem="${index}" class="wallet-item">${resultHtml}</div>\n                  <div class="wallet-item-tokenid">${i.tokenId}</div>\n                </div>`).join("")),walletList.innerHTML=html,setTimeout(()=>{const walletItems=Array.from(document.querySelectorAll(".wallet-item"));walletItems.forEach((item,index)=>{const state=punks[index],size="var(--punk--cartSize)",node=item,imgSelector=`[data-walletitem="${index}"] > img`;resetResult({node:node,state:state,imgSelector:imgSelector,size:size})}),wallet.dataset.status=walletItems.length?"connected":"empty"})}catch(e){wallet.dataset.status="disconnected",showMessage(e.message,"error")}}else wallet.dataset.status="disconnected"},resetPunkInView=()=>{const hash=window.location.hash;let isPunkInView=!1;if(hash&&/^#[0-9]+$/.test(hash))try{const tokenId=parseInt(hash.replace("#",""));if(tokenId>=window.MIN_TOKENID&&tokenId<=MAX_TOKENID){punkViewerTitle.innerHTML=tokenId,punkViewerItem.innerHTML=result.innerHTML;const punk=window.getPunkFromTokenId(tokenId),state={...punk,base:`${punk.gender}-${punk.skin}`},size="var(--punk--result)",node=punkViewerItem,imgSelector=".punk-viewer-item > img";resetResult({node:node,state:state,imgSelector:imgSelector,size:size});let traitsHtml="";["gender",...window.ATTRIBUTES_LIST].forEach(attr=>{punk[attr]&&(traitsHtml+=`<div class="punk-viewer-traits-item"><div>${window.labelize(attr)}</div><div>${window.labelize(punk[attr])}</div></div>`)}),traitsList.innerHTML=traitsHtml,isPunkInView=!0}}catch(e){console.error(`invalid hash => ${hash}`)}setModalOpen(isPunkInView,punkViewer)},closeModals=()=>{setModalOpen(!1),setModalOpen(!1,punkViewer),showMessage(null),window.history.pushState(null,null," ")},selectChain=(chain,dontResetWeb3)=>{if(chain){const selectedChain=getCurrentChain();if(selectedChain!==chain){const node=document.querySelector('.chain[data-selected="true"]');node&&(node.dataset.selected="false"),document.querySelector(`.chain[data-chain="${chain}"]`).dataset.selected="true",resetCurrentData(),dontResetWeb3||setTimeout(()=>resetWeb3(!0))}}else{const node=document.querySelector('.chain[data-selected="true"]');node&&(node.dataset.selected="false")}};window.addEventListener("keydown",e=>{"Escape"===e.key&&closeModals()}),window.selectSprite=((layer,id)=>{STATE[layer]=id,resetResult();const options=Array.from(modal.querySelectorAll(".option"));options.forEach(o=>o.dataset.selected=o.dataset.id===id),setModalOpen(!1),document.body.style.overflow="initial",resetCombos(),resetCart()}),window.openOpenSea=((tokenId,chain)=>{const selectedChain=chain||getCurrentChain();if("bsc"===selectedChain)window.location.assign(`#${tokenId}`);else{let preffix="https://opensea.io/assets/";"polygon"===selectedChain&&(preffix+="matic/"),window.open(`${preffix}/${SETTINGS[selectedChain].address}/${tokenId}`,"_blank").focus()}}),window.openPriceEvolution=(()=>{const selectedChain=getCurrentChain()||DEFAULT_CHAIN,priceItems=SETTINGS[selectedChain].price.evolution;priceItems.find(i=>i[0]===SETTINGS.supply)||priceItems.push([SETTINGS.supply,SETTINGS[selectedChain].price.current]);const html=`\n    <div data-active="false" class="price-evolution">\n      <div class="chart-container">\n        <img src="/assets/img/chart.svg" />\n        <div class="chart-line" style="left:${100*Math.max(.01,Math.round(SETTINGS.supply/1e6))}%"></div>\n      </div>\n      <div class="chart-table">\n        ${priceItems.sort((a,b)=>a[0]-b[0]).map(i=>`\n            <div data-current="${i[0]===SETTINGS.supply?"true":"false"}" class="chart-table-item">\n              <div class="chart-table-item-label">#${i[0].toLocaleString()}</div>\n              <div class="sep"></div>\n              <div class="chart-table-item-price">${(i[1]<10?Math.round(1e3*i[1])/1e3:Math.round(i[1])).toLocaleString()} ${SETTINGS[selectedChain].price.symbol}\n              </div>\n            </div>`).join("")}\n      </div>\n      <div class="chart-legend">\n            <span>*</span> current price\n      </div>\n    </div>`;showMessage(html,"price"),setTimeout(()=>{const priveEvolution=document.querySelector(".price-evolution");priveEvolution&&(priveEvolution.dataset.active="true")},100)}),window.onWeb3Loaded=(async()=>resetWeb3()),window.addEventListener("hashchange",resetPunkInView),combos.forEach(c=>createCombo(c)),addToCartButton.addEventListener("click",addToCart),mintButton.addEventListener("click",mint),connectWalletButton.addEventListener("click",connect),mintFirstPunkButton.addEventListener("click",()=>builder.scrollIntoView({behavior:"smooth"})),closeButton.addEventListener("click",closeModals),closePunkViewerButton.addEventListener("click",closeModals),closeMessageButton.addEventListener("click",()=>showMessage(null)),Array.from(document.querySelectorAll(".chain")).forEach(chain=>{chain.addEventListener("click",()=>{const itemChain=chain.dataset.chain;"connected"===document.querySelector("body").dataset.web3?askChain(Web3.givenProvider,itemChain):connect(itemChain)})}),resetResult(),resetPunkInView();let currentFavicon=1;(function step(){favicon.dataset.updated||(favicon.setAttribute("href",`/assets/img/favicon/${currentFavicon}.png`),currentFavicon++,currentFavicon>9&&(currentFavicon=0)),gridItems.forEach(item=>{item.dataset.initialized||(item.innerHTML=result.innerHTML,item.dataset.initialized="true");const random=Math.floor(36e6*Math.random()),state=window.getPunkFromTokenId(random),size="var(--punk--cartSize)",node=item,imgSelector=`[data-griditem="${item.dataset.griditem}"] > img`;resetResult({node:node,state:state,imgSelector:imgSelector,size:size})}),setTimeout(step,1e3)})()})();
